apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector: 
    app: end-to-end-js-app-mean-stack-backend
  ports:
    - protocol: 'TCP'
      port: 3000
      targetPort: 3000
    # - protocol: 'TCP'
    #   port: 443
    #   targetPort: 443
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: end-to-end-js-app-mean-stack-backend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: end-to-end-js-app-mean-stack-backend
      tier: backend
  template:
    metadata: 
      labels:
        app: end-to-end-js-app-mean-stack-backend
        tier: backend
    spec: 
      containers:
        - name: expressjs
          image: borismarinov2023/end-to-end-js-app-mean-stack-backend:latest
          ports:
            - containerPort: 3000
          # env:
          #   - name: DATABASE_URL
          #     value: "10.104.6.32"
          resources:
            requests:
              memory: "128Mi"
              cpu: "500m"
            limits:
              memory: "256Mi"
              cpu: "1000m"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector: 
    app: end-to-end-js-app-mean-stack-frontend
  ports:
    - protocol: 'TCP'
      port: 80
      targetPort: 80
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: end-to-end-js-app-mean-stack-frontend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: end-to-end-js-app-mean-stack-frontend
      tier: frontend
  template:
    metadata: 
      labels:
        app: end-to-end-js-app-mean-stack-frontend
        tier: frontend
    spec: 
      containers:
        - name: angular-ngnix
          image: borismarinov2023/end-to-end-js-app-mean-stack-app:latest
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "128Mi"
              cpu: "500m"
            limits:
              memory: "256Mi"
              cpu: "1000m"
---
apiVersion: v1
kind: Service
metadata:
  name: database
spec:
  selector: 
    app: end-to-end-js-app-mean-stack-database
  ports:
    - protocol: 'TCP'
      name: mongodb
      port: 27017
      targetPort: 27017
    - protocol: 'TCP'
      name: mongo-express
      port: 8081
      targetPort: 8081
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: end-to-end-js-app-mean-stack-database-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: end-to-end-js-app-mean-stack-database
      tier: database
  template:
    metadata: 
      labels:
        app: end-to-end-js-app-mean-stack-database
        tier: database
    spec: 
      containers:
        - name: mongo
          image: mongo:latest
          ports:
            - containerPort: 27017
          resources:
            requests:
              memory: "128Mi"
              cpu: "500m"
            limits:
              memory: "256Mi"
              cpu: "1000m"
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/db
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: "root"
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: "example"
        - name: mongo-express
          image: mongo-express:latest
          ports:
            - containerPort: 8081
          resources:
            requests:
              memory: "128Mi"
              cpu: "500m"
            limits:
              memory: "256Mi"
              cpu: "1000m"
          env:
            - name: ME_CONFIG_MONGODB_ADMINUSERNAME
              value: "root"
            - name: ME_CONFIG_MONGODB_ADMINPASSWORD
              value: "example"
            - name: ME_CONFIG_MONGODB_URL
              value: "mongodb://root:example@localhost:27017"
      volumes:
        - name: mongo-storage
          persistentVolumeClaim:
            claimName: mongo-pvc
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /data
    type: DirectoryOrCreate
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi
  volumeName: mongo-pv

